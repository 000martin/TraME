#!/bin/bash
## TraME config script

function print_help
{ 
    echo "" ;
    echo -e "\x1B[32mTraME Configure options:\033[0m" >&2 ;
    echo "-c    Coverage build" ;
    echo "-d    Development build" ;
    echo "-g    Debugging build (optimization flags set to -O0 -g)" ;
    echo "-h    Print help" ;
    echo "-i    Install path (default: current directory)" ;
    echo "        Example: /usr/local" ;
    echo "-l    Enable wrappers for a linear programming library" ;
    echo "        Examples: -l glpk or -l gurobi" ;
    echo "-m    Specify the BLAS and Lapack libraries to link against" ; 
    echo "        Examples: -m \"-lopenblas\" or -m \"-framework Accelerate\"" ;
    echo "-o    Compiler optimization options; defaults to -O3 -march=native" ;
    echo "-p    Enable OpenMP parallelization features" ;
    echo "" ;
}

while getopts hcdgi:l:m:o:pv option; do
    case "${option}" in
        h) print_help; exit 2;;
        c) TRAME_COVERAGE_BUILD="y";;
        d) TRAME_BUILD="dev";;
        g) TRAME_DEBUG_BUILD="y";;
        i) TRAME_INSTALL_PATH=${OPTARG};;
        l) TRAME_LP=${OPTARG};;
        m) TRAME_MATRIX_OPS=${OPTARG};;
        o) TRAME_OPT=${OPTARG};;
        p) TRAME_PARALLEL="y";;
        v) TRAME_BUILD_VERBOSE="y";;
        ?) print_help; exit 2;;
    esac
done

if [ -z ${CC+x} ]; then 
    CC=gcc
fi
if [ -z ${CXX+x} ]; then 
    CXX=g++
fi
if [ -z ${FC+x} ]; then 
    FC=gfortran
fi

#

echo ""
echo -e "\x1B[32mTraME Configuration...\033[0m" >&2 ;
echo ""

# compiler checks

IS_DARWIN=$($CXX -dumpmachine 2>&1 | grep -i -c "darwin")
GCC_COMPILER=$($CXX --version 2>&1 | grep -i -c -E "gcc")
GFC_COMPILER=$($FC --version 2>&1 | grep -i -c -E "gcc")
# APPLE_COMPILER=$($CXX --version 2>&1 | grep -i -c -E 'apple llvm')

# get working directory
WDIR=${PWD}

# look for Armadillo
if [ -z ${ARMA_INCLUDE_PATH+x} ]; then
    
    declare -a ARMA_DIRS=("${WDIR}/include" "/usr/include" "/usr/local/include" "/opt/include" "/opt/local/include")
    ARMA_INCLUDE_PATH=

    for i in "${ARMA_DIRS[@]}"; do
        if [ -f "$i"/armadillo ]; then 
            ARMA_INCLUDE_PATH="$i"
            break
        fi
    done

    if [[ $ARMA_INCLUDE_PATH == "" ]]; then
        echo -e "\x1B[31m  - note: cannot find Armadillo files. Cloning from GitHub\033[0m" >&2 ;
        echo ""

        mkdir ${WDIR}/arma_tmp
        if [[ "${TRAME_BUILD_VERBOSE}" == "y" ]]; then 
            git clone -b unstable --single-branch https://github.com/conradsnicta/armadillo-code ${WDIR}/arma_tmp 
            echo ""
        else
            git clone -b unstable --single-branch https://github.com/conradsnicta/armadillo-code ${WDIR}/arma_tmp > /dev/null 2>&1
        fi
        mv ${WDIR}/arma_tmp/include/* ${WDIR}/include
        rm -rf ${WDIR}/arma_tmp
        ARMA_INCLUDE_PATH="./include"
    fi
fi

# set build and optimization flags

if [[ "${TRAME_COVERAGE_BUILD}" == "y" ]]; then 
    TRAME_OPT_FLAGS="-O0 -g --coverage -fno-inline -fno-inline-small-functions -fno-default-inline"
elif [[ "${TRAME_DEBUG_BUILD}" == "y" ]]; then 
    TRAME_OPT_FLAGS="-O0 -g"
else
    if [[ "${TRAME_OPT}" == "" ]]; then
        # echo "TraME: experimental optimization enabled; use of NaN or +/-Inf not recognized"
        TRAME_OPT_FLAGS="-O3 -march=native -flto -DARMA_NO_DEBUG"
    else
        TRAME_OPT_FLAGS="${TRAME_OPT}"
    fi

    if [[ "${TRAME_PARALLEL}" == "y" ]]; then
        TRAME_OPT_FLAGS="${TRAME_OPT_FLAGS} -fopenmp"
    else
        TRAME_OPT_FLAGS="${TRAME_OPT_FLAGS} -DTRAME_DONT_USE_OPENMP"
    fi
fi

TRAME_WARN_FLAGS="-Wall"

# shared library name and install path

TRAME_SHLIB_NAME="libtrame.so"

if [[ "${TRAME_INSTALL_PATH}" == "" ]]; then
    TRAME_INSTALL_PATH="${WDIR}"
    TRAME_INSTALL_LIB_PATH="${WDIR}"
else
    TRAME_INSTALL_LIB_PATH="${TRAME_INSTALL_PATH}/lib"
fi

#
# switch between OSX and Linux

if [[ $OSTYPE == darwin* ]] ; then
    if [[ !(-z ${TRAME_R_VERSION+x}) ]]; then 
        TRAME_SHLIB_FLAGS="-dynamiclib -install_name "@loader_path/${TRAME_SHLIB_NAME}" -Wl,-headerpad_max_install_names -undefined dynamic_lookup -single_module -multiply_defined suppress"

        TRAME_BLAS_LAPACK="${TRAME_LAPACK_LIBS} ${TRAME_BLAS_LIBS}"
    else
        TRAME_SHLIB_FLAGS="-dynamiclib -install_name "${TRAME_INSTALL_LIB_PATH}/${TRAME_SHLIB_NAME}" -Wl,-headerpad_max_install_names -undefined dynamic_lookup -single_module -multiply_defined suppress"

        TRAME_BLAS_LAPACK="-framework Accelerate"
    fi

    # look for any Gurobi directories, then choose the latest one
    grb_dirs=( /Library/gurobi* )
    nmb_dirs=${#grb_dirs[@]}
    grb_latest=${grb_dirs[$nmb_dirs-1]}

    # 'grb_dirs' will always be non-empty; in the case where no Gurobi directories are detected,
    # grb_dirs will contain just '/Library/gurobi*', which is not an actual directory, so we need 
    # the following sanity check
    if [[ !("${TRAME_LP}" == "glpk") && -d $grb_latest ]] ; then

        grb_lib_path=( "$grb_latest/mac64/lib/libgurobi*.so" )

        grb_lib_latest=${grb_lib_path[0]}
        grb_lib_name=$(basename ${grb_lib_latest})
        grb_lib_num=${grb_lib_name//[^0-9]/}
        
        TRAME_LP="Gurobi"
        LP_INCLUDE_PATH="-DTRAME_USE_GUROBI -I$grb_latest/mac64/include"
        LP_LIB_PATH="-L$grb_latest/mac64/lib"
        LP_LIB_FLAGS="-lgurobi${grb_lib_num}"
        LP_LIB_RPATH="-Wl,-rpath,$grb_latest/mac64/lib"

    else
        # look for GLPK, or download it
        if [ -f ${WDIR}/glpk_tmp/include/glpk.h ]; then
            LP_INCLUDE_PATH="-DTRAME_USE_GLPK -I${WDIR}/glpk_tmp/include"
            LP_LIB_PATH="-L${WDIR}/glpk_tmp/lib"
        elif [ -f /usr/include/glpk.h ]; then
            LP_INCLUDE_PATH="-DTRAME_USE_GLPK -I/usr/include"
            LP_LIB_PATH="-L/usr/lib"
        elif [ -f /usr/local/include/glpk.h ]; then
            LP_INCLUDE_PATH="-DTRAME_USE_GLPK -I/usr/local/include"
            LP_LIB_PATH="-L/usr/local/lib"
        elif [ -f /opt/include/glpk.h ]; then
            LP_INCLUDE_PATH="-DTRAME_USE_GLPK -I/opt/include"
            LP_LIB_PATH="-L/opt/lib"
        elif [ -f /opt/local/include/glpk.h ]; then
            LP_INCLUDE_PATH="-DTRAME_USE_GLPK -I/opt/local/include"
            LP_LIB_PATH="-L/opt/local/lib"
        else
            echo -e "\x1B[31m  - note: cannot find a linear programming solver. Downloading and building GLPK.\033[0m" >&2 ;
            echo ""

            mkdir ${WDIR}/glpk_tmp
            cd glpk_tmp

            if [[ "${TRAME_BUILD_VERBOSE}" == "y" ]]; then 
                curl -O http://ftp.gnu.org/gnu/glpk/glpk-4.65.tar.gz
                tar -xzf glpk-4.65.tar.gz
                cd glpk-4.65
                ./configure --prefix=${WDIR}/glpk_tmp
                make
                make PREFIX=${WDIR}/glpk_tmp install
                echo ""
            else
                curl -O http://ftp.gnu.org/gnu/glpk/glpk-4.65.tar.gz > /dev/null 2>&1
                tar -xzf glpk-4.65.tar.gz > /dev/null 2>&1
                cd glpk-4.65
                ./configure --prefix=${WDIR}/glpk_tmp > /dev/null 2>&1
                make > /dev/null 2>&1
                make PREFIX=${WDIR}/glpk_tmp install > /dev/null 2>&1
            fi

            cd ${WDIR}

            rm -f ${WDIR}/glpk_tmp/glpk-4.65.tar.gz
            rm -rf ${WDIR}/glpk_tmp/glpk-4.65

            LP_INCLUDE_PATH="-DTRAME_USE_GLPK -I${WDIR}/glpk_tmp/include"
            LP_LIB_PATH="-L${WDIR}/glpk_tmp/lib"
        fi
    TRAME_LP="GLPK"
    LP_LIB_FLAGS="-lglpk"
    LP_LIB_RPATH=

    fi
elif [[ $OSTYPE == *linux* ]] ; then
    TRAME_OPT_FLAGS="-fPIC ${TRAME_OPT_FLAGS}"
    TRAME_SHLIB_FLAGS="-fPIC -shared -L${TRAME_INSTALL_LIB_PATH} -Wl,-Bsymbolic-functions -Wl,-z,relro "
    TRAME_BLAS_LAPACK="-lblas -llapack"

    # look for any Gurobi directories, then choose the latest one
    grb_dirs=( /opt/gurobi* )
    nmb_dirs=${#grb_dirs[@]}
    grb_latest=${grb_dirs[$nmb_dirs-1]}

    # 'grb_dirs' will always be non-empty; in the case where no Gurobi directories are detected,
    # grb_dirs will contain just '/Library/gurobi*', which is not an actual directory, so we need 
    # the following sanity check
    if [[ !("${TRAME_LP}" == "glpk") && -d $grb_latest ]] ; then
        grb_lib_path=( "$grb_latest/linux64/lib/libgurobi*.so" )

        grb_lib_latest=${grb_lib_path[0]}
        grb_lib_name=$(basename ${grb_lib_latest})
        grb_lib_num=${grb_lib_name//[^0-9]/}

        TRAME_LP="Gurobi"
        LP_INCLUDE_PATH="-DTRAME_USE_GUROBI -I$grb_latest/linux64/include"
        LP_LIB_PATH="-L$grb_latest/linux64/lib"
        LP_LIB_FLAGS="-lgurobi${grb_lib_num}"
        LP_LIB_RPATH="-Wl,-rpath,$grb_latest/linux64/lib"

    else
        # look for GLPK, or download it
        if [ -f ${WDIR}/glpk_tmp/include/glpk.h ]; then
            LP_INCLUDE_PATH="-DTRAME_USE_GLPK -I${WDIR}/glpk_tmp/include"
            LP_LIB_PATH="-L${WDIR}/glpk_tmp/lib"
        elif [ -f /usr/include/glpk.h ]; then
            LP_INCLUDE_PATH="-DTRAME_USE_GLPK -I/usr/include"
            LP_LIB_PATH="-L/usr/lib"
        elif [ -f /usr/local/include/glpk.h ]; then
            LP_INCLUDE_PATH="-DTRAME_USE_GLPK -I/usr/local/include"
            LP_LIB_PATH="-L/usr/local/lib"
        elif [ -f /opt/include/glpk.h ]; then
            LP_INCLUDE_PATH="-DTRAME_USE_GLPK -I/opt/include"
            LP_LIB_PATH="-L/opt/lib"
        elif [ -f /opt/local/include/glpk.h ]; then
            LP_INCLUDE_PATH="-DTRAME_USE_GLPK -I/opt/local/include"
            LP_LIB_PATH="-L/opt/local/lib"
        else
            echo -e "\x1B[31m  - note: cannot find a linear programming solver. Downloading and building GLPK.\033[0m" >&2 ;
            echo ""

            mkdir ${WDIR}/glpk_tmp
            cd glpk_tmp

            if [[ "${TRAME_BUILD_VERBOSE}" == "y" ]]; then 
                curl -O http://ftp.gnu.org/gnu/glpk/glpk-4.65.tar.gz
                tar -xzf glpk-4.65.tar.gz
                cd glpk-4.65
                ./configure --prefix=${WDIR}/glpk_tmp
                make
                make PREFIX=${WDIR}/glpk_tmp install
                echo ""
            else
                curl -O http://ftp.gnu.org/gnu/glpk/glpk-4.65.tar.gz > /dev/null 2>&1
                tar -xzf glpk-4.65.tar.gz > /dev/null 2>&1
                cd glpk-4.65
                ./configure --prefix=${WDIR}/glpk_tmp > /dev/null 2>&1
                make > /dev/null 2>&1
                make PREFIX=${WDIR}/glpk_tmp install > /dev/null 2>&1
            fi

            cd ${WDIR}

            rm -f ${WDIR}/glpk_tmp/glpk-4.65.tar.gz
            rm -rf ${WDIR}/glpk_tmp/glpk-4.65

            LP_INCLUDE_PATH="-DTRAME_USE_GLPK -I${WDIR}/glpk_tmp/include"
            LP_LIB_PATH="-L${WDIR}/glpk_tmp/lib"
        fi
    
    TRAME_LP="GLPK"
    LP_LIB_FLAGS="-lglpk"
    LP_LIB_RPATH=

    fi
elif [[ $OSTYPE == *cygwin* ]] ; then
    TRAME_SHLIB_NAME="libtrame.dll"
    TRAME_OPT_FLAGS="${TRAME_OPT_FLAGS} -DARMA_DONT_PRINT_CXX11_WARNING"

    TRAME_SHLIB_FLAGS="-shared -L${TRAME_INSTALL_LIB_PATH} "
    TRAME_BLAS_LAPACK="-lblas -llapack"

    # look for any Gurobi directories, then choose the latest one
    grb_dirs=( /cygdrive/c/gurobi* )
    nmb_dirs=${#grb_dirs[@]}
    grb_latest=${grb_dirs[$nmb_dirs-1]}

    # 'grb_dirs' will always be non-empty; in the case where no Gurobi directories are detected,
    # grb_dirs will contain just '/Library/gurobi*', which is not an actual directory, so we need 
    # the following sanity check
    if [[ !("${TRAME_LP}" == "glpk") && -d $grb_latest ]] ; then
        grb_lib_path=( "$grb_latest/win64/bin/libgurobi*.dll" )

        grb_lib_latest=${grb_lib_path[0]}
        grb_lib_name=$(basename ${grb_lib_latest})
        grb_lib_num=${grb_lib_name//[^0-9]/}
        
        TRAME_LP="Gurobi"
        LP_INCLUDE_PATH="-DTRAME_USE_GUROBI -I$grb_latest/win64/include"
        LP_LIB_PATH="-L$grb_latest/win64/bin"
        LP_LIB_FLAGS="-lgurobi${grb_lib_num}"
        LP_LIB_RPATH="-Wl,-rpath,$grb_latest/win64/bin"

    else
        # look for GLPK, or download it
        if [ -f ${WDIR}/glpk_tmp/include/glpk.h ]; then
            LP_INCLUDE_PATH="-DTRAME_USE_GLPK -I${WDIR}/glpk_tmp/include"
            LP_LIB_PATH="-L${WDIR}/glpk_tmp/lib"
        elif [ -f /usr/include/glpk.h ]; then
            LP_INCLUDE_PATH="-DTRAME_USE_GLPK -I/usr/include"
            LP_LIB_PATH="-L/usr/lib"
        elif [ -f /usr/local/include/glpk.h ]; then
            LP_INCLUDE_PATH="-DTRAME_USE_GLPK -I/usr/local/include"
            LP_LIB_PATH="-L/usr/local/lib"
        elif [ -f /opt/include/glpk.h ]; then
            LP_INCLUDE_PATH="-DTRAME_USE_GLPK -I/opt/include"
            LP_LIB_PATH="-L/opt/lib"
        elif [ -f /opt/local/include/glpk.h ]; then
            LP_INCLUDE_PATH="-DTRAME_USE_GLPK -I/opt/local/include"
            LP_LIB_PATH="-L/opt/local/lib"
        else
            echo -e "\x1B[31m  - note: cannot find a linear programming solver. Downloading and building GLPK.\033[0m" >&2 ;
            echo ""

            mkdir ${WDIR}/glpk_tmp
            cd glpk_tmp

            if [[ "${TRAME_BUILD_VERBOSE}" == "y" ]]; then 
                curl -O http://ftp.gnu.org/gnu/glpk/glpk-4.65.tar.gz
                tar -xzf glpk-4.65.tar.gz
                cd glpk-4.65
                ./configure --prefix=${WDIR}/glpk_tmp
                make
                make PREFIX=${WDIR}/glpk_tmp install
                echo ""
            else
                curl -O http://ftp.gnu.org/gnu/glpk/glpk-4.65.tar.gz > /dev/null 2>&1
                tar -xzf glpk-4.65.tar.gz > /dev/null 2>&1
                cd glpk-4.65
                ./configure --prefix=${WDIR}/glpk_tmp > /dev/null 2>&1
                make > /dev/null 2>&1
                make PREFIX=${WDIR}/glpk_tmp install > /dev/null 2>&1
            fi

            cd ${WDIR}

            rm -f ${WDIR}/glpk_tmp/glpk-4.65.tar.gz
            rm -rf ${WDIR}/glpk_tmp/glpk-4.65

            LP_INCLUDE_PATH="-DTRAME_USE_GLPK -I${WDIR}/glpk_tmp/include"
            LP_LIB_PATH="-L${WDIR}/glpk_tmp/lib"
            LP_LIB_FLAGS="-lglpk"
            LP_LIB_RPATH=
        fi
    
    TRAME_LP="GLPK"
    LP_LIB_FLAGS="-lglpk"
    LP_LIB_RPATH=

    fi
else
    TRAME_BLAS_LAPACK="-lblas -llapack"

    TRAME_LP=""
    LP_INCLUDE_PATH=
    LP_LIB_PATH=
    LP_LIB_FLAGS=
    LP_LIB_RPATH=
fi

# final settings

if [[ !(-z ${TRAME_MATRIX_OPS+x}) ]]; then
    TRAME_BLAS_LAPACK="${TRAME_MATRIX_OPS}"
fi

if [[ "${TRAME_COVERAGE_BUILD}" == "y" ]]; then 
    TRAME_SHLIB_FLAGS="--coverage ${TRAME_SHLIB_FLAGS}"
else
    TRAME_SHLIB_FLAGS="${TRAME_OPT_FLAGS} ${TRAME_SHLIB_FLAGS}"
fi

if [ "$IS_DARWIN" -eq "1" ] && [ "$GCC_COMPILER" -eq "1" ]; then
    TRAME_OPT_FLAGS="-Wa,-q ${TRAME_OPT_FLAGS}"
fi

TRAME_FC_OPT_FLAGS=$TRAME_OPT_FLAGS

if [ "$IS_DARWIN" -eq "1" ] && [ "$GCC_COMPILER" -eq "0" ] && [ "$GFC_COMPILER" -eq "1" ]; then
    TRAME_FC_OPT_FLAGS="-Wa,-q ${TRAME_FC_OPT_FLAGS}"
fi

#
# final print:

echo "  - OS: ${OSTYPE}"

if [[ "${TRAME_BUILD}" == "dev" ]]; then
    echo "  - Build version: development"
elif [[ "${TRAME_COVERAGE_BUILD}" == "y" ]]; then
    echo "  - Build version: coverage"
elif [[ "${TRAME_DEBUG_BUILD}" == "y" ]]; then
    echo "  - Build version: debug"
else
    echo "  - Build version: release"
fi

echo ""

echo "  - ARMA_INCLUDE_PATH set to:"
echo "    ${ARMA_INCLUDE_PATH}"
echo "  - BLAS and Lapack libraries set to:"
echo "    ${TRAME_BLAS_LAPACK}"

echo ""

echo "  - LP solver: ${TRAME_LP}"
echo "    * LP_INCLUDE_PATH:"
echo "      ${LP_INCLUDE_PATH}"
echo "    * LP_LIB_PATH:"
echo "      ${LP_LIB_PATH}"
echo "    * LP_LIB_FLAGS:"
echo "      ${LP_LIB_FLAGS}"

echo ""

if [[ "${TRAME_PARALLEL}" == "y" ]]; then
    echo -e "  - OpenMP features: \x1B[32menabled\033[0m" >&2 ;
else
    echo -e "  - OpenMP features: \x1B[31mdisabled\033[0m" >&2 ;
fi

echo "  - optimization flags:"
echo "    ${TRAME_OPT_FLAGS}"

echo ""

echo "  - TraME install path:"
echo "    ${TRAME_INSTALL_PATH}"

echo ""
echo "  - Additional notes:"

if [ "$IS_DARWIN" -eq "1" ] && [ "$GCC_COMPILER" -eq "1" ]; then
    echo "    - To enable AVX features, your compiler will use the Apple LLVM"
    echo "      assembler"
fi

if [ "$IS_DARWIN" -eq "1" ] && [ "$GCC_COMPILER" -eq "0" ] && [ "$GFC_COMPILER" -eq "1" ]; then
    echo "    - To enable AVX features, your Fortran compiler will use the"
    echo "      Apple LLVM assembler."
fi

echo ""
echo -e "\x1B[32mConfiguration completed. Creating Makefile.\033[0m" >&2 ;
echo ""

# create Makefile

sed -e "s|@CC@|${CC}|" \
    -e "s|@CXX@|${CXX}|" \
    -e "s|@FC@|${FC}|" \
    -e "s|@ARMA_INCLUDE_PATH@|${ARMA_INCLUDE_PATH}|" \
    -e "s|@TRAME_BLAS_LAPACK@|${TRAME_BLAS_LAPACK}|" \
    -e "s|@TRAME_WARN_FLAGS@|${TRAME_WARN_FLAGS}|" \
    -e "s|@TRAME_OPT_FLAGS@|${TRAME_OPT_FLAGS}|" \
    -e "s|@TRAME_FC_OPT_FLAGS@|${TRAME_FC_OPT_FLAGS}|" \
    -e "s|@TRAME_SHLIB_NAME@|${TRAME_SHLIB_NAME}|" \
    -e "s|@TRAME_SHLIB_FLAGS@|${TRAME_SHLIB_FLAGS}|" \
    -e "s|@TRAME_BUILD_PATH@|${WDIR}|" \
    -e "s|@TRAME_INSTALL_PATH@|${TRAME_INSTALL_PATH}|" \
    -e "s|@LP_INCLUDE_PATH@|${LP_INCLUDE_PATH}|" \
    -e "s|@LP_LIB_PATH@|${LP_LIB_PATH}|" \
    -e "s|@LP_LIB_FLAGS@|${LP_LIB_FLAGS}|" \
    -e "s|@LP_LIB_RPATH@|${LP_LIB_RPATH}|" \
    Makefile.in > Makefile
